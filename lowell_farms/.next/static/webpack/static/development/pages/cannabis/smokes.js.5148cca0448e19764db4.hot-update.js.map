{"version":3,"file":"static/webpack/static/development/pages/cannabis/smokes.js.5148cca0448e19764db4.hot-update.js","sources":["webpack:///./components/Collection.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport base64 from 'base-64';\nimport zipcodes from 'zipcodes';\nimport { RichText } from 'prismic-reactjs';\nimport Product from './Product';\nimport { ZIP_CODE_QUERY } from './ZipCodeCheck';\n\nexport default class Products extends Component {\n  render() {\n    const {\n      handle,\n      productCategory,\n      products,\n      limit,\n      deliveryZipCodes,\n      zipCodeData,\n    } = this.props;\n\n    const prismicProductData = {};\n\n    for (let i = 0; i < products.length; i++) {\n      const productId =\n        products[i].data.shopify_product != null &&\n        products[i].data.shopify_product != ''\n          ? products[i].data.shopify_product.id\n          : products[i].uid;\n      prismicProductData[productId] = products[i];\n    }\n\n    return (\n      <div className=\"container\">\n        <Query\n          query={COLLECTION_QUERY}\n          variables={{\n            handle,\n            limit,\n          }}\n        >\n          {({ data, error, loading }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error: {error.message}</p>;\n            return (\n              <Query query={ZIP_CODE_QUERY}>\n                {({ data: { zipCode } }) => {\n                  // GET STATE FROM ZIP CODE\n                  const locationInfoByZip =\n                    zipCode != '' ? zipcodes.lookup(zipCode) : '';\n                  const zipCodeState =\n                    locationInfoByZip != '' ? locationInfoByZip.state : '';\n                  let showBuyButton = false;\n\n                  if (handle !== 'Gear') {\n                    // RESTRICT CBD SHIPPING TO SOME STATES\n                    const CBDExclusionZones =\n                      zipCodeData.cbd_exclusion_zones != '' &&\n                      zipCodeData.cbd_exclusion_zones != null\n                        ? RichText.asText(zipCodeData.cbd_exclusion_zones)\n                        : '';\n                    showBuyButton =\n                      (handle == 'Cannabis' || productCategory == 'Cannabis' &&\n                        zipCode != '' &&\n                        deliveryZipCodes.includes(zipCode) &&\n                        zipCodeData.delivery_service_launched != 'false') ||\n                      (handle == 'CBD' &&\n                        !CBDExclusionZones.includes(zipCodeState) &&\n                        zipCodeData.cbd_shipping_launched != 'false');\n                  }\n\n                  return (\n                    <div className=\"cols-3 cols-2-md\">\n                      {data.shop.collectionByHandle.products.edges.map(\n                        product => {\n                          const shopifyId = base64.decode(product.node.id);\n                          const productId = /[^/]*$/.exec(shopifyId)[0];\n                          const productInfo = prismicProductData[productId];\n                          return (\n                            <Product\n                              product={product}\n                              key={product.node.id.toString()}\n                              productInfo={productInfo}\n                              handle={handle}\n                              showBuyButton={showBuyButton}\n                            />\n                          );\n                        }\n                      )}\n                    </div>\n                  );\n                }}\n              </Query>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nconst COLLECTION_QUERY = gql`\n  query COLLECTION_QUERY($handle: String!, $limit: Int!) {\n    shop {\n      collectionByHandle(handle: $handle) {\n        products(first: $limit) {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n          }\n          edges {\n            node {\n              id\n              title\n              handle\n              availableForSale\n              collections(first: 1) {\n                edges {\n                  node {\n                    handle\n                  }\n                }\n              }\n              options {\n                id\n                name\n                values\n              }\n              variants(first: 250) {\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                }\n                edges {\n                  node {\n                    id\n                    title\n                    weight\n                    weightUnit\n                    selectedOptions {\n                      name\n                      value\n                    }\n                    image {\n                      src\n                    }\n                    price\n                  }\n                }\n              }\n              images(first: 250) {\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                }\n                edges {\n                  node {\n                    src\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAQA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAIA;AAGA;AAIA;;;;AAxFA;AACA;AADA;AA2FA;;;;A","sourceRoot":""}