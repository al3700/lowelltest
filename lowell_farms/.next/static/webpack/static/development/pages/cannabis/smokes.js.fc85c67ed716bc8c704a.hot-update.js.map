{"version":3,"file":"static/webpack/static/development/pages/cannabis/smokes.js.fc85c67ed716bc8c704a.hot-update.js","sources":["webpack:///./components/Product.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { RichText } from 'prismic-reactjs';\nimport { Query } from 'react-apollo';\n\nimport ProductCard from './styles/ProductCard';\n\nimport AddToCart from './AddToCart';\nimport Title from './styles/Title';\n\nexport default class Product extends Component {\n  static propTypes = {\n    product: PropTypes.object.isRequired,\n  };\n\n  preventBubbling = e => {\n    // Show 6 more delivery services each time the button is clicked\n    if (e.target.tagName == 'BUTTON') {\n      e.preventDefault();\n    }\n  };\n\n  render() {\n    const { product, productInfo, handle, showBuyButton } = this.props;\n\n    let type;\n    let quantity;\n    let percentage;\n    let percentageUnit;\n    let weight;\n    let productTopRow;\n    let productBottomRow;\n    let typeColor;\n\n    const productRoundedPrice = product.node.variants.edges[0].node.price.replace(\n      /\\.00$/,\n      ''\n    );\n\n    if (handle == 'CBD' || handle == 'Cannabis') {\n      if (productInfo != undefined) {\n        type = RichText.asText(productInfo.data.type);\n        quantity = RichText.asText(productInfo.data.quantity);\n        percentage = RichText.asText(productInfo.data.thc_percentage);\n        percentageUnit = RichText.asText(productInfo.data.percentage_unit);\n\n        type = type != '' && type != undefined ? type.toLowerCase() : '';\n\n        switch (type) {\n          case 'hemp':\n            typeColor = '#A38F60';\n            break;\n          case 'indica':\n            typeColor = '#232323';\n            break;\n          case 'sativa':\n            typeColor = '#58794E';\n            break;\n          default:\n            typeColor = '#BB845A';\n            break;\n        }\n      }\n\n      weight = (\n        <span>\n          {product.node.variants.edges[0].node.weight}{' '}\n          {product.node.variants.edges[0].node.weightUnit},\n        </span>\n      );\n      productTopRow = (\n        <div className=\"split-aligner\">\n          <p className=\"product-type\" style={{ color: typeColor }}>\n            {type}\n          </p>\n          <p className=\"product-amount\">\n            {percentage}\n            <span>{percentageUnit}</span>\n          </p>\n        </div>\n      );\n\n      productBottomRow = (\n        <span>\n          {weight}\n          <span>{quantity}</span>\n        </span>\n      );\n    } else {\n      console.log(productInfo);\n      productBottomRow = (\n        <span>\n          {productInfo &&\n            productInfo.data.short_description != '' &&\n            productInfo.data.short_description != null &&\n            RichText.asText(productInfo.data.short_description)}\n        </span>\n      );\n    }\n\n    return (\n      <ProductCard>\n        <Link\n          href={{\n            pathname: '/product',\n            query: { handle: product.node.handle },\n          }}\n        >\n          <div onClick={this.preventBubbling}>\n            {' '}\n            {productInfo && productInfo.data.landing_page_image != '' && (\n              <img\n                src={productInfo.data.landing_page_image.url}\n                alt={`${product.node.title} product shot`}\n              />\n            )}\n            <Title>\n              {productTopRow}\n              <a>{product.node.title}</a>\n              <p className=\"product-notes split-text\">\n                {productBottomRow}\n                <strong>&#36;{productRoundedPrice}</strong>\n              </p>\n              {showBuyButton && (\n                <AddToCart\n                  id={product.node.variants.edges[0].node.id}\n                  price={productRoundedPrice}\n                  onClick={this.preventBubbling}\n                  availableForSale={product.node.availableForSale}\n                />\n              )}\n            </Title>\n          </div>\n        </Link>\n      </ProductCard>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAZA;AAcA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAOA;AAMA;AACA;AACA;AAQA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAFA;AADA;AAMA;AAAA;AAIA;AACA;AAFA;AAQA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAYA;;;;AA9HA;AACA;AADA;AAEA;AADA;AACA;;;;;A","sourceRoot":""}